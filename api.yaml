openapi: 3.0.1
info:
  title: KRSI
  description: 'KRSI API Specification this is a special learning project `specification` '
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: dev@krsi.org
  license:
    name: Apache 2.0 <TO BE Updated>
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: To be updated
  url: 'http://krsi.org'
servers:
  - url: 'https://api.kris.com/v2'
tags:
  - name: user
    description: describes how to access user object
    externalDocs:
      description: yet to be updated
      url: 'https://docs.kris.com/'
  - name: farm
    description: Access to farms
    externalDocs:
      description: yet to be updated
      url: 'https://docs.kris.com/'
  - name: expense
    description: Operations on expenses
    externalDocs:
      description: yet to be updated
      url: 'https://docs.kris.com/'
  - name: framProduce
    description: user production/yeild/corp from a farm
    externalDocs:
      description: yet to be updated
      url: 'https://docs.kris.com/'
paths:

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: successful operation

  '/user/{uuid}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: uuid
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid uuid supplied
          content: {}
        '404':
          description: User not found
          content: {}
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: uuid
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '400':
          description: Invalid uuid supplied
          content: {}
        '404':
          description: User not found
          content: {}
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: uuid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid uuid supplied
          content: {}
        '404':
          description: User not found
          content: {}
          
  /farm:
    post:
      tags:
        - farm
      summary: Create a new farm
      description: New Farm can only be added by the logged in user.
      operationId: createFarm
      requestBody:
        description: Created Farm object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
        required: true
      responses:
        default:
          description: successful operation
        400:
          description: Bad input request
    get:
      tags:
        - farm
      summary: List all farms of a user
      operationId: List of all Farms
      responses:
        200:
          description: A list of all farms held by a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfFarms'
        400:
          description: Bad input request
      
          
  /farm/{id}:
    get:
      tags: 
        - farm
      summary: Get the details of a given farm
      description: use this operation to lookup all details of the farm
      operationId: getFarmById
      parameters:
      - name: id
        in: path
        description: ID of Farm to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
        404:
          description: Farm not found
          content: {}
          
    put:
      tags: 
       - farm
      summary: Get the details of a given farm
      description: use this operation to update details of a given farm
      operationId: updateFarmById
      parameters:
      - name: id
        in: path
        description: ID of Farm to return
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Farm object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
    delete:
      tags: 
       - farm
      summary: Delete the Farm, this will not allowed if it has active produce and expense.
      description: use this operation to delete a farm
      operationId: deleteFarmById
      parameters:
      - name: id
        in: path
        description: ID of Farm to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'    
                
  /expense:
    post:
      tags:
        - expense
      summary: Create a new Expense
      description: New expense can only be added by the logged in user.
      operationId: createExpense
      requestBody:
        description: Created Expense object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
        required: true
      responses:
        default:
          description: successful operation
        400:
          description: Bad input request
    get:
      tags:
        - expense
      summary: List all expenses of a user
      operationId: ListOfExpenes
      responses:
        200:
          description: A list of all farms held by a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfExpenses'
        400:
          description: Bad input request
          
  /expense/{id}:
    get:
      tags: 
        - farm
      summary: Get the details of a expense farm
      description: Get the expense details
      operationId: getExpenseById
      parameters:
      - name: id
        in: path
        description: ID of expense to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        404:
          description: expense not found
          content: {}
          
    put:
      tags: 
       - expense
      summary: Update the details of a given farm
      description: use this operation to update details of a given farm
      operationId: updateExpenseById
      parameters:
      - name: id
        in: path
        description: ID of exprense to return
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Expense object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Expense'
      responses:
        200:
          description: successful operation
          
    delete:
      tags: 
       - farm
      summary: Delete the Farm, this will not allowed if it has active produce and expense.
      description: use this operation to delete a farm
      operationId: deleteExpensemById
      parameters:
      - name: id
        in: path
        description: ID of Farm to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          
          
components:
  schemas:
    
    Farm:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        lat:
          type: number
        lng:
          type: number
        village:
          type: string
          maxLength: 45
        taluk:
         type: string
         maxLength: 45
        area:
          type: number
        unit:
          type: string
          enum: 
            - acre
            - hectare
            - sq.m

    User:
      type: object
      required:
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
        uuid:
          type: string
          maxLength: 45
        name:
          type: string
          maxLength: 120
        signupDate:
          type: string
        email:
          type: string
          maxLength: 100
        dob:
          type: string
        phone:
          type: string
        status:
          type: string
          description: user status
          enum:
            - active
            - suspended
            - deleted
        street1: 
          type: string
          maxLength: 120
        stereet2:
          type: string
          maxLength: 120
        street3: 
          type: string
          maxLength: 120
        city:
          type: string
          maxLength: 80
        village:
          type: string
          maxLength: 80
        state:
          type: string
          maximum: 45
        language:
          type: string
          description: 2 letter ISO Code
          maxLength: 2
        timezone:
          type: string
          maxLength: 20
        currency:
          type: string
          description: 3 letter ISO Code
          maxLength: 3

    FarmProduce:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        season:
          type: string
          enum: 
            - summer
        startDate:
          type: string
        endDate:
          type: string
        budget:
          type: integer
        farm:
          $ref: '#/components/schemas/Farm'
        expenses:
          type: array
          items:
            $ref: '#/components/schemas/Expense'

    Expense:
     type: object
     properties:
      id:
        type: integer
        format: int64
      amount:
        type: number
      currency:
        type: string
        maxLength: 3
      expenseDate:
        type: string
      comments:
        type: string
        maxLength: 255
    
    ArrayOfExpenses:
      type: array
      items:
        $ref: '#/components/schemas/Expense'

    ArrayOfFarms:
      type: array
      items:
        $ref: '#/components/schemas/Farm'

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
